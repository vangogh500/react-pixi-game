{
  "mainnav": {
    "docs": "Documentation",
    "source": "Source Code"
  },
  "sidenav": {
    "section_1": {
      "title": "Basics",
      "boilerplate": "Boilerplate",
      "geometry": "Drawing Geometry",
      "sprites": "Sprites",
      "animations": "Animations",
      "animatedsprite": "Animated Sprite",
      "tilingsprite": "Tiling Sprite"
    },
    "section_2": {
      "title": "Filter",
      "blur": "Blur",
      "displacement": "Displacement",
      "animating": "Animating Filters"
    },
    "section_3": {
      "title": "User Interaction",
      "pointer": "Pointer Event",
      "keyboard": "Keyboard Event"
    }
  },
  "home": {
    "title": "Welcome to RPG",
    "subtitle": "By Vangogh500 (Kai Matsuda)",
    "subtext": "A new way to code web applications using Pixi.js and Facebook's React.",
    "section_1": {
      "main_title": "Why use RPG?",
      "title_1": "Harness the power of WebGL:",
      "text_1": "Take advantage of the client's gpu, allowing for a more extensive and complex app with minimal performance costs. Using both the cpu and gpu will give your apps the power it deserves.",
      "title_2": "Take advantage of the modularity and simplicity of react:",
      "text_2": "Facebook's react is becoming one of the web's most popular frameworks. Encapsulating pixi with React allows for readable and reusable code for WebGL. It also allows for the integration of the visuals with the redux system."
    },
    "section_2": {
      "title": "Dependencies",
      "subtext": "This project is in works with vangogh500-physics a concurrent physics engine utilizing akka's concurrency model."
    },
    "section_3": {
      "title": "Installation",
      "subtext_1": "RPG is currently available on npm.",
      "subtext_2": "To add it as a dependency to your project, simply run: "
    },
    "section_4": {
      "title": "Dev log:"
    },
    "notes": {
      "version": "RPG is currently in beta version 0.0.4a.",
      "migration": "Implementing physics in scala.js to take advantage of both the language features/performance advantages of scala and akka' concurrency model, which allows for multiprocesses on the browser. Code will be provided via the npm package vangogh500-physics.",
      "contribution": {
        "text": "Feel free to message me on my Github if you would like to contribute.",
        "link": "Link here."
      }
    }
  },
  "boilerplate": {
    "line_1": "Try clicking on the canvas!",
    "line_2": "The Loop component creates a game loop. The speed will depend on the browser's 'requestAnimationFrame', however fps can be capped for a normalized experience.",
    "line_3": "The Stage component initializes a rendering engine and adds a DOM element to display it. The renderer is automatically hooked up to the game loop and will be rerendered accordingly. Although WebGL is implemented in most modern browsers, if WebGL is not supported the component will default to a standard HTML Canvas.",
    "line_4": "The ResourceLoader component preloads all assets that are to be reused in your animations."
  },
  "geometry": {
    "line_1": "RPG comes with 2 basic geometric shapes to draw primitives."
  },
  "sprites": {
    "line_1": "Sprites can be created by an url. However it is recommended to use resource loader to preload the assets for performance reasons.",
    "line_2": "In this example we provide the loader with a texture atlas of a sprite sheet (a sprite sheet is more efficient than loading in your assets seperately). The loader will refrain from rendering until all resources are loaded."
  },
  "animations": {
    "line_1": "You can automatically access the game loop using the tick event component and passing a custom callback. A number representing the time elapsed since the last tick is passed to the callback if you choose to use it. In this example ticks are set to generate 30 times per second. Make sure you pass a reference to a function. It will be needed later for identification when the function is unhooked from the event listener.",
    "line_2": "This paradigm is an inspiration from the react-game-kit library."
  },
  "animatedsprite": {
    "line_1": "RPG also comes with an extension of Pixi's animated sprite, which allows for easy sprite animations."
  },
  "tilingsprite": {
    "line_1": "The tiling sprite allows you to create backgrounds from a single sprite."
  },
  "pointerevent": {
    "line_1": "All touch and mouse related events can be accessed via the PointerEvent component."
  }
}
